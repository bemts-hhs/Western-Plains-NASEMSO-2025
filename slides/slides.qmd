---
title: "The Relative Mortality Metric"
subtitle: "Extending Risk-Adjusted Mortality Measurement"
author: "Nicolas Foss, Ed.D., MS"
date: "2025-10-08"
format: 
  letterbox-revealjs:
    output-file: index.html
    theme: custom.scss
    footer: "Western Plains NASEMSO 2025"
    logo: figures/HHS_PH_horiz_color_print.jpg
    transition: slide
    menu: true
    slide-number: false
    self-contained: true
    toc: false
    code-overflow: wrap
    notes: true
    progress: false
    title-slide-attributes:
      class: title-slide
      data-background-color: white
      data-background-size: cover
      data-background-position: center
execute: 
  echo: false
  warning: false
  message: false
  eval: true
  include: false
---

# Objectives

Today we will look at...

-   injury data where injuries were cared for in Iowa
-   conventional measures of risk-adjusted mortality
-   introduction to Napoli et. al (2017) relative mortality metric
-   examine Iowa trauma system performance
    -   geographic areas
    -   falls vs. other injuries

::: notes
Remember to mention that data in this presentation pertain only to injuries that were cared for in Iowa hospitals take care of patients from across our borders frequently. Overall statistics reported in the annual trauma report will vary from those reported here.
:::

# Accessing this presentation

::: incremental
-   [Bureau of Emergency Medical and Trauma Services GitHub Page](https://github.com/bemts-hhs/)

-   [`{traumar}` package page](https://bemts-hhs.github.io/traumar/)
:::

::: notes
BEMTS epidemiologist (me) is the author and maintainer of the traumar and nemsqar packages We will use traumar during this presentation later when we calculate mortality rates and risk-adjusted mortality You can access the slides directly from the link above Feel free to take a look at the slideshow while we are here!
:::

# About Iowa

::: {.incremental}

- Inclusive trauma system
- 121 facilities
- 2 Level I, 1 Level II, 15 Level III (1 ACS verified)
- 100 Level IV (State verified)
- All facilities must report to the trauma registry

:::


# About Iowa

::: {.incremental}

- 116 facilities type in data to the registry
- 5 facilities use 3rd party registry, upload
- 97.75% of records have validity 85% or greater
- In 2025, 92% concurrency statewide

:::


# About the data

Source: Iowa Trauma Registry from 2020-2024.

::: incremental
-   Check out [Trauma Data Registry](https://hhs.iowa.gov/health-prevention/providers-professionals/emergency-medical-services-trauma/trauma-system-resources/trauma-data-registry) for inclusion criteria.
-   The trauma registry...
    -   ...houses data on the most severe injuries.
    -   ...does not register all injuries in Iowa.
        -   Iowa Hospital Association's Inpatient Outpatient dataset = comprehensive
:::

## Why Risk Adjustment Matters

- Raw mortality rates can mislead comparisons between hospitals.  
- Centers treat different mixes of patients — older adults, severe trauma, or complex injuries.  
- Fair benchmarking requires adjustment for **patient risk**.  
- The goal: compare performance **given who each center treats**, not just raw outcomes.

## Concept of Risk Adjustment

- For each patient, we estimate a **predicted probability of survival**, \( P(\text{Survival}) \).  
- The estimate depends on key variables:
  - Injury Severity Score (ISS)
  - Revised Trauma Score (RTS)
  - Age Index
  - Mechanism (Blunt vs. Penetrating)
- These variables form a regression model with published coefficients from validated Major Trauma Outcomes Study (MTOS) research.

# Probability of survival
Modern trauma registries and EHRs will do this calculation for you.
The survival prognosis is computed based on a logistic regression equation of the form:
$$
\text{Survival Probability} = \frac{1}{1 + e^{-b}}
$$
where 
$$
b = \beta_{0} + \beta_{1} \times \text{RTS} + \beta_{2} \times \text{ISS} + \beta_{3} \times \text{AgeIndex}
$$
Blunt and penetrating injuries use different coefficients to estimate the predicted probabilities.

## From Individual to System-Level Benchmark

- Compute \( P(\text{Survival}) \) for each patient.  
- Sum these probabilities across all patients -> **Expected Survivors**.
- Sum \( 1 - P(\text{Survival}) \) across all patients -> **Expected Decedents**. 
- Compare to **Observed Survivors and Decedents** from actual outcomes.  

## Why This is a Benchmarking Standard

- The **ACS Trauma Quality Improvement Program (TQIP)** uses similar regression models for national benchmarking.  
- This approach adjusts for injury severity, physiology, and demographics.  
- It provides a fair, risk-adjusted performance measure.  
- Centers can identify opportunities for improvement based on deviation from expected outcomes.  

> “Predicted probability of survival provides a standardized, risk-adjusted view of trauma center performance—aligned with ACS TQIP methodology.”  
> [ACS Trauma Quality Programs](https://www.facs.org/quality-programs/trauma/quality/trauma-quality-improvement-program/)  
> [Trauma Risk Adjustment Overview (PubMed Central)](https://pmc.ncbi.nlm.nih.gov/articles/PMC10649144/)

# But, how do I calculate risk-adjusted metrics, what are they?

# W-Score: Risk-Adjusted Performance Metric

- The W-score quantifies **how a trauma center performs relative to expected outcomes**.  
- It expresses the **difference between observed and expected survivors**, scaled to patient volume.

$$
W = \frac{A - B}{C} \times 100
$$

Where:  

- \(A\) = Total number of patients with all data necessary to calculate \(P_s\) **minus** the number of those patients who died (i.e., observed survivors)  
- \(B\) = Sum of all predicted survival probabilities (\(P_s\)) for this patient group (i.e., expected survivors)  
- \(C\) = Total number of patients with all data necessary to calculate \(P_s\)  

**Interpretation for clinicians:**  

- \(W > 0\) → More survivors than expected; center performing better than average  
- \(W < 0\) → Fewer survivors than expected; center performing worse than average  
- Provides a **volume-adjusted, risk-adjusted measure** similar in purpose to RMM.

# M-Score: Linear Binning Approach

- The M-score divides patients into bins of **equal width** based on predicted survival probability, \(P_s\).  
- Assumes that \(P_s\) is evenly distributed.  

- **Problem:** \(P_s\) from logistic regression is **not normally distributed** — many patients cluster near very high or very low survival probabilities.  
- Linear bins overrepresent some risk groups and underrepresent others, which can distort observed vs expected comparisons.

```{r setup}

#| label: setup

# Get path to figures folder
figures <- Sys.getenv("figures_folder")

# Path to needed functions
setup <- Sys.getenv("setup_file")

# clinical data

# trauma environment variables
trauma_data_path_2020 <- Sys.getenv("trauma_data_2020")
trauma_data_path_2021 <- Sys.getenv("trauma_data_2021")
trauma_data_path_2022 <- Sys.getenv("trauma_data_2022")
trauma_data_path_2023 <- Sys.getenv("trauma_data_2023")
trauma_data_path_2024 <- Sys.getenv("trauma_data_2024")

# files for classification environment variables
iowa_counties_districts_path <- Sys.getenv("iowa_counties_districts")
hospital_data_path <- Sys.getenv("hospital_data_folder")

# Get needed custom functions into memory
source(setup)
```

<!-- Code to load data for presentation -->

```{r load_data}

#| label: load_data

# classify counties in the data
location_data <- readxl::read_excel(path = iowa_counties_districts_path)

# select variables of interest for Iowa county classification
location_data <- location_data |>
  dplyr::select(County, Designation, Urbanicity)

# classify IPOP data using hospital information
hospital_data <- readxl::read_excel(path = hospital_data_path) |>
  janitor::clean_names(case = "screaming_snake")

### trauma data
trauma_data_2020 <- readr::read_csv(file = trauma_data_path_2020)
trauma_data_2021 <- readr::read_csv(file = trauma_data_path_2021)
trauma_data_2022 <- readr::read_csv(file = trauma_data_path_2022)
trauma_data_2023 <- readr::read_csv(file = trauma_data_path_2023)
trauma_data_2024 <- readr::read_csv(file = trauma_data_path_2024)

# union the trauma data
trauma_data <- dplyr::bind_rows(
  trauma_data_2020 |>
    dplyr::mutate(dplyr::across(
      .cols = tidyselect::matches("_zip$"),
      ~ as.character(.)
    )),
  trauma_data_2021 |>
    dplyr::mutate(dplyr::across(
      .cols = tidyselect::matches("_zip$"),
      ~ as.character(.)
    )),
  trauma_data_2022 |>
    dplyr::mutate(dplyr::across(
      .cols = tidyselect::matches("_zip$"),
      ~ as.character(.)
    )),
  trauma_data_2023 |>
    dplyr::mutate(dplyr::across(
      .cols = tidyselect::matches("_zip$"),
      ~ as.character(.)
    )),
  trauma_data_2024 |>
    dplyr::mutate(dplyr::across(
      .cols = tidyselect::matches("_zip$"),
      ~ as.character(.)
    ))
)
```

<!-- Data manipulation -->

```{r add_data_features}

#| label: add_data_features

# deal with missing values in cause of injury categories
trauma_data_clean <- trauma_data |>
  dplyr::mutate(
    Age_Group = dplyr::case_when(
      Patient_Age_Years < 5 ~ "0-4",
      Patient_Age_Years >= 5 & Patient_Age_Years < 10 ~ "5-9",
      Patient_Age_Years >= 10 & Patient_Age_Years < 15 ~ "10-14",
      Patient_Age_Years >= 15 & Patient_Age_Years < 20 ~ "15-19",
      Patient_Age_Years >= 20 & Patient_Age_Years < 25 ~ "20-24",
      Patient_Age_Years >= 25 & Patient_Age_Years < 30 ~ "25-29",
      Patient_Age_Years >= 30 & Patient_Age_Years < 35 ~ "30-34",
      Patient_Age_Years >= 35 & Patient_Age_Years < 40 ~ "35-39",
      Patient_Age_Years >= 40 & Patient_Age_Years < 45 ~ "40-44",
      Patient_Age_Years >= 45 & Patient_Age_Years < 50 ~ "45-49",
      Patient_Age_Years >= 50 & Patient_Age_Years < 55 ~ "50-54",
      Patient_Age_Years >= 55 & Patient_Age_Years < 60 ~ "55-59",
      Patient_Age_Years >= 60 & Patient_Age_Years < 65 ~ "60-64",
      Patient_Age_Years >= 65 & Patient_Age_Years < 70 ~ "65-69",
      Patient_Age_Years >= 70 & Patient_Age_Years < 75 ~ "70-74",
      Patient_Age_Years >= 75 & Patient_Age_Years < 80 ~ "75-79",
      Patient_Age_Years >= 80 & Patient_Age_Years < 85 ~ "80-84",
      Patient_Age_Years >= 85 ~ "85+",
      TRUE ~ "Missing",
      .default = "Missing"
    ),
    Age_Group = factor(
      Age_Group,
      levels = c(
        "0-4",
        "5-9",
        "10-14",
        "15-19",
        "20-24",
        "25-29",
        "30-34",
        "35-39",
        "40-44",
        "45-49",
        "50-54",
        "55-59",
        "60-64",
        "65-69",
        "70-74",
        "75-79",
        "80-84",
        "85+",
        "Missing"
      )
    ),
    .after = Age_Range
  ) |>
  dplyr::mutate(
    Injury_County = stringr::str_to_title(Injury_County),
    Injury_County = dplyr::if_else(
      grepl(pattern = "o'b", x = Injury_County, ignore.case = TRUE),
      "O'Brien",
      Injury_County
    )
  ) |>
  dplyr::left_join(location_data, by = c("Patient_County" = "County")) |>
  dplyr::rename(
    Designation_Patient = Designation,
    Urbanicity_Patient = Urbanicity
  ) |>
  dplyr::relocate(
    tidyselect::all_of(c("Designation_Patient", "Urbanicity_Patient")),
    .after = Patient_County
  ) |>
  dplyr::left_join(location_data, by = c("Injury_County" = "County")) |>
  dplyr::rename(
    Designation_Injury = Designation,
    Urbanicity_Injury = Urbanicity
  ) |>
  dplyr::relocate(
    tidyselect::all_of(c("Designation_Injury", "Urbanicity_Injury")),
    .after = Injury_County
  ) |>
  dplyr::left_join(location_data, by = "County") |>
  dplyr::relocate(
    tidyselect::all_of(c("Designation", "Urbanicity")),
    .after = County
  ) |>
  dplyr::mutate(
    falls = grepl(
      pattern = "fall",
      x = CAUSE_OF_INJURY_AR_1,
      ignore.case = TRUE
    )
  )

# helper function for mode
mode_first <- function(x) {
  x <- na.omit(x)
  if (length(x) == 0) {
    return(NA_character_)
  }
  tab <- table(x)
  mode_val <- names(tab)[which.max(tab)]
  return(mode_val)
}

# Get patient level data for risk adjusted metrics
# Remove missing values and get some categorical data for grouping
trauma_patients <- trauma_data_clean |>
  dplyr::filter(
    !is.na(Probability_of_Survival_Calc),
    !is.infinite(Probability_of_Survival_Calc),
    !is.na(Death),
    !is.na(Unique_Patient_ID)
  ) |>
  dplyr::summarize(
    Probability_of_Survival = min(Probability_of_Survival_Calc, na.rm = TRUE),
    Death = max(Death, na.rm = TRUE),
    Survival = 1 - Death,
    Trauma_Type = mode_first(Trauma_Type),
    CAUSE_OF_INJURY_AR_1 = mode_first(CAUSE_OF_INJURY_AR_1),
    .by = c(
      Year,
      Unique_Patient_ID,
      Incident_Date,
      Age_Range,
      Patient_Gender
    )
  )

```

<!-- Initial risk adjusted data -->

```{r introduce_ps}

#| label: introduce_ps

###_____________________________________________________________________________
# Estimate W, M, Z scores and show the distribution of patients
###_____________________________________________________________________________

# total falls trauma cases
first_binning <- trauma_data_clean |>
  traumar::

```

<!-- Calculate county-level crude and age adjusted rates -->

```{r calculate_county_rates}

#| label: calculate_county_rates

###_____________________________________________________________________________
# Trauma data age adjustments
###_____________________________________________________________________________

# rates summarized by year and county

# injuries
injury_rates <- injury_fall_counts |>
  calc_age_adjusted_rate(
    count = injuries,
    local_population = County_Age_Population,
    standard_population_weight = Weight,
    .by = c("Year", "Injury_County")
  ) |>
  dplyr::mutate(
    pretty_label = ifelse(
      Year %in% c(2020, 2023, 2024),
      traumar::pretty_number(
        x = Age_Adjusted_Rate,
        n_decimal = 2
      ),
      ""
    ),
    .by = Injury_County
  ) |>
  dplyr::left_join(location_data, by = c("Injury_County" = "County")) |>
  dplyr::rename(
    injuries = Count,
    injury_crude_rate = Crude_Rate,
    injury_age_adjusted_rate = Age_Adjusted_Rate,
    injury_pretty_label = pretty_label
  )

# falls
fall_rates <- injury_fall_counts |>
  calc_age_adjusted_rate(
    count = falls,
    local_population = County_Age_Population,
    standard_population_weight = Weight,
    .by = c("Year", "Injury_County")
  ) |>
  dplyr::mutate(
    pretty_label = ifelse(
      Year %in% c(2020, 2023, 2024),
      traumar::pretty_number(
        x = Age_Adjusted_Rate,
        n_decimal = 2
      ),
      ""
    ),
    .by = Injury_County
  ) |>
  dplyr::left_join(location_data, by = c("Injury_County" = "County")) |>
  dplyr::rename(
    falls = Count,
    fall_crude_rate = Crude_Rate,
    fall_age_adjusted_rate = Age_Adjusted_Rate,
    fall_pretty_label = pretty_label
  )

# join the columns of the injury and fall rates by county
injury_fall_rates <- injury_rates |>
  dplyr::left_join(
    fall_rates,
    by = dplyr::join_by(Year, Injury_County, Designation, Urbanicity)
  ) |>
  dplyr::relocate(Designation, .after = tidyselect::last_col()) |>
  dplyr::relocate(Urbanicity, .after = Designation)

```

<!-- Calculate state-level crude and age adjusted rates -->

```{r calculate_state_rates}

#| label: calculate_state_rates

###_____________________________________________________________________________
# rates at the state level
###_____________________________________________________________________________

# injuries
iowa_injury_rate <- iowa_injury_fall_counts_age |>
  calc_age_adjusted_rate(
    count = injuries,
    local_population = State_Population,
    standard_population_weight = Weight,
    .by = "Year",
    rate = 100000
  ) |>
  dplyr::rename(
    injuries = Count,
    injury_crude_rate = Crude_Rate,
    injury_age_adjusted_rate = Age_Adjusted_Rate
  )

# falls
iowa_fall_rate <- iowa_injury_fall_counts_age |>
  calc_age_adjusted_rate(
    count = falls,
    local_population = State_Population,
    standard_population_weight = Weight,
    .by = "Year",
    rate = 100000
  ) |>
  dplyr::rename(
    falls = Count,
    fall_crude_rate = Crude_Rate,
    fall_age_adjusted_rate = Age_Adjusted_Rate
  )

# get the state-level fall and injury rates into one table
iowa_injury_fall_rate <- iowa_injury_rate |>
  dplyr::left_join(iowa_fall_rate, by = dplyr::join_by(Year))

```

<!-- Create the sf object for the leaflet map -->

```{r create_sf}

#| label: create_sf

# Get Iowa counties as sf object
iowa_counties <- tigris::counties(state = "IA", cb = TRUE, class = "sf")

# Join rates and reproject to WGS84
injury_fall_rates_sf <- iowa_counties |>
  dplyr::left_join(
    injury_fall_rates,
    by = dplyr::join_by(NAME == Injury_County)
  ) |>
  sf::st_transform(crs = 4326) # WGS84 for Leaflet

```

<!-- Helper functions for palettes within leaflet -->

```{r map_pals}

#| label: map_pals

# Injury palette function (magma)
pal_injury <- leaflet::colorNumeric(
  palette = viridis::cividis(256, direction = -1),
  domain = c(
    min(injury_fall_rates_sf$injury_age_adjusted_rate, na.rm = TRUE),
    max(injury_fall_rates_sf$injury_age_adjusted_rate, na.rm = TRUE)
  )
)

# Injury palette function (magma)
pal_falls <- leaflet::colorNumeric(
  palette = viridis::cividis(256, direction = -1),
  domain = c(
    min(injury_fall_rates_sf$fall_age_adjusted_rate, na.rm = TRUE),
    max(injury_fall_rates_sf$fall_age_adjusted_rate, na.rm = TRUE)
  )
)

```

<!-- Create the leaflet map -->

```{r leaflet_map}

#| label: leaflet_map

# Build the leaflet map

# Unique years
years <- sort(unique(injury_fall_rates_sf$Year))

# Start leaflet map
map <- leaflet::leaflet(
  options = leaflet::leafletOptions(
    zoomControl = FALSE
  )
) |>
  leaflet::addTiles()

# Add layers per Year × Indicator
for (yr in years) {
  # Injury polygons
  map <- map |>
    leaflet::addPolygons(
      data = dplyr::filter(injury_fall_rates_sf, Year == yr),
      fillColor = ~ pal_injury(injury_age_adjusted_rate),
      weight = 1,
      color = "white",
      fillOpacity = 0.85,
      group = paste("Injury", yr),
      label = ~ paste(
        NAMELSAD,
        paste0("Year: ", Year),
        paste0("Injury Rate: ", round(injury_age_adjusted_rate, 1)),
        sep = " || "
      ),
      labelOptions = leaflet::labelOptions(
        direction = "auto",
        opacity = 0.8,
        textsize = "12px",
        style = list("font-family" = "Work Sans"),
        offset = c(0, 0)
      )
    )

  # Fall polygons
  map <- map |>
    leaflet::addPolygons(
      data = dplyr::filter(injury_fall_rates_sf, Year == yr),
      fillColor = ~ pal_falls(fall_age_adjusted_rate),
      weight = 1,
      color = "white",
      fillOpacity = 0.85,
      group = paste("Falls", yr),
      label = ~ paste(
        NAMELSAD,
        paste0("Year: ", Year),
        paste0("Fall Rate: ", round(fall_age_adjusted_rate, 1)),
        sep = " || "
      ),
      labelOptions = leaflet::labelOptions(
        direction = "auto",
        opacity = 0.8,
        textsize = "12px",
        style = list("font-family" = "Work Sans"),
        offset = c(0, 0)
      )
    )
}

# Add single legends for Injury and Falls (full range)
trauma_map <- map |>
  leaflet::addLegend(
    pal = pal_injury,
    values = injury_fall_rates_sf$injury_age_adjusted_rate,
    title = "Injury Rate",
    position = "topleft",
    opacity = 0.7,
    group = "Legend"
  ) |>
  leaflet::addLegend(
    pal = pal_falls,
    values = injury_fall_rates_sf$fall_age_adjusted_rate,
    title = "Fall Rate",
    position = "bottomleft",
    opacity = 0.7,
    group = "Legend"
  ) |>
  # Add layers control on right with slight transparency
  leaflet::addLayersControl(
    baseGroups = as.vector(outer(c("Injury", "Falls"), years, paste)),
    options = leaflet::layersControlOptions(collapsed = TRUE)
  ) |>
  htmlwidgets::onRender(
    "
    function(el,x){
      var ctl = el.getElementsByClassName('leaflet-control-layers')[0];
      if(ctl) ctl.style.opacity = 0.8;
    }
    "
  )

# Wrap with alt text for accessibility and force map height
trauma_map <- htmltools::tags$div(
  role = "img",
  `aria-label` = "Interactive choropleth map of Iowa counties showing injury and fall rates from 2020 to 2024.",
  `aria-describedby` = "map-desc",
  style = "height: 80vh;",
  trauma_map
)
```

<!-- Calculate initial counts for the overall falls -->

```{r overall_counts}

#| label: overall_counts

# Get counts
falls_counts <- trauma_data_clean |>
  dplyr::mutate(
    falls = dplyr::if_else(
      !grepl(pattern = "fall", x = CAUSE_OF_INJURY_AR_1, ignore.case = TRUE),
      "Other Injury",
      CAUSE_OF_INJURY_AR_1,
      missing = "Missing"
    )
  ) |>
  injury_incident_count(Year, falls) |>
  tidyr::pivot_wider(id_cols = Year, names_from = falls, values_from = n) |>
  dplyr::rowwise() |>
  dplyr::mutate(
    prop_all_falls = Fall / rowSums(dplyr::across(Fall:`Other Injury`)),
    prop_same_level = `Fall - Same Level` /
      rowSums(dplyr::across(Fall:`Other Injury`)),
    prop_other = `Other Injury` / rowSums(dplyr::across(Fall:`Other Injury`)),
    prop_falls = (Fall + `Fall - Same Level`) /
      rowSums(dplyr::across(Fall:`Other Injury`))
  ) |>
  dplyr::relocate(prop_all_falls, .after = Fall) |>
  dplyr::relocate(prop_same_level, .after = `Fall - Same Level`) |>
  dplyr::relocate(prop_other, .after = `Other Injury`)

# gt table to show counts
falls_counts_gt <- falls_counts |>
  gt::gt() |>
  gt::fmt_number(
    columns = c(Fall, `Fall - Same Level`, `Other Injury`),
    drop_trailing_zeros = TRUE
  ) |>
  gt::fmt_percent(
    columns = tidyselect::matches("prop"),
    drop_trailing_zeros = TRUE
  ) |>
  gt::cols_label(
    tidyselect::matches("same") ~ "Same Level",
    "prop_all_falls" ~ "% Falls",
    "prop_same_level" ~ "% Same Level",
    "prop_other" ~ "% Other Injury",
    prop_falls ~ "% Any Falls"
  ) |>
  gt::cols_merge(columns = Fall:prop_all_falls, pattern = "{1} ({2})") |>
  gt::cols_merge(
    columns = `Fall - Same Level`:prop_same_level,
    pattern = "{1} ({2})"
  ) |>
  gt::cols_merge(columns = `Other Injury`:prop_other, pattern = "{1} ({2})") |>
  tab_style_hhs(border_cols = Fall:prop_all_falls)

# save the gt table
gt::gtsave(
  data = falls_counts_gt,
  filename = "falls_count_gt.png",
  vwidth = 800,
  vheight = 800 / 1.333333,
  path = figures
)

```

# Overall fall statistics

In the following slides, we will review state-level fall statistics.

## Falls at a glance

Year over year, since 2020, falls make up \> 55% of all injury events in Iowa. Same-level falls grow rapidly.

![](figures/falls_count_gt.png){fig-alt="A statistical table showing counts of fall events in Iowa 2020-2024."}

## What is the fall rate?

<!-- Generate the rate table -->

```{r rate_table}

#| label: rate_table

# generate the state-level rates gt table
iowa_injury_fall_rate_gt <- iowa_injury_fall_rate |>
  gt::gt() |>
  gt::fmt_number(columns = -Year, decimals = 2, drop_trailing_zeros = TRUE) |>
  gt::cols_label(
    injuries ~ "Injury Events",
    injury_crude_rate ~ "Injury Crude Rate",
    injury_age_adjusted_rate ~ "Injury Age Adjusted Rate",
    falls ~ "Falls",
    fall_crude_rate ~ "Falls Crude Rate",
    fall_age_adjusted_rate ~ "Falls Age Adjusted Rate"
  ) |>
  tab_style_hhs(border_cols = injuries:fall_age_adjusted_rate)

# save the gt table
gt::gtsave(
  data = iowa_injury_fall_rate_gt,
  filename = "iowa_injury_fall_rate_gt.png",
  vwidth = 800,
  vheight = 800 / 1.333333,
  path = figures
)
```

![](figures/iowa_injury_fall_rate_gt.png){fig-align="center" fig-alt="A statistical table showing counts of total injury and fall events with corresponding rates in Iowa 2020-2024." fig-cap=""}

::: notes
We interpret these rates as the number of distinct injury events (incidents) per 100,000 Iowans in the given year As of 2024, injury events that occur in Iowa have an age adjusted incidence rate of 361 per 100,000 Iowans This refers to injury events that lead to specialty care at a hospital The true injury rate or fall rate would likely be much higher as not all injuries are reported to the registry See Bureau of Chronic, Congenital and Inherited Conditions Epi Dr. Toby Yak's reports on injury and fall rates
:::

# Who falls the most?

In the upcoming slides, we will explore count data related to fall events by patient demographic characteristics.

## Age Groups

<!-- Age group fall counts and gt table -->

```{r count_age_range}

#| label: count_age_range

# get counts with annual trends
age_range_counts <- trauma_data_clean |>
  dplyr::mutate(
    Age_Range = ifelse(is.na(Age_Range), "Missing", Age_Range),
    Age_Range = factor(
      Age_Range,
      levels = c(
        "0-9",
        "10-19",
        "20-29",
        "30-39",
        "40-49",
        "50-59",
        "60-69",
        "70-79",
        "80-89",
        "90-99",
        "100+",
        "Missing"
      )
    )
  ) |>
  dplyr::filter(falls) |>
  injury_incident_count(Year, Age_Range) |>
  tidyr::pivot_wider(
    id_cols = Age_Range,
    names_from = Year,
    values_from = n,
    values_fill = 0
  ) |>
  janitor::adorn_totals(where = "both") |>
  # compute % of Total but exclude the "Total" row from denominator
  dplyr::mutate(
    pct_of_total = ifelse(
      Age_Range == "Total",
      1,
      Total / sum(Total[Age_Range != "Total"], na.rm = TRUE)
    ),
    .after = Total
  ) |>
  dplyr::rowwise() |>
  dplyr::mutate(
    `2020 - 2024 Trend` = list(c(`2020`, `2021`, `2022`, `2023`, `2024`))
  ) |>
  dplyr::ungroup()

# get gt table
age_range_gt <- age_range_counts |>
  gt::gt() |>
  gt::fmt_number(columns = `2020`:Total, drop_trailing_zeros = TRUE) |>
  gt::cols_label(
    Age_Range ~ "Age Range"
  ) |>
  # bar chart percentage column before sparkline
  gtExtras::gt_plt_bar_pct(
    column = pct_of_total,
    scaled = FALSE,
    labels = TRUE
  ) |>
  gtExtras::gt_plt_sparkline(
    column = `2020 - 2024 Trend`,
    type = "points",
    same_limit = FALSE,
    label = FALSE
  ) |>
  gt::cols_label(
    pct_of_total ~ "% of Total"
  ) |>
  tab_style_hhs(border_cols = `2020`:`2020 - 2024 Trend`) |>
  gt::tab_style(
    style = gt::cell_fill(color = "lightyellow"),
    locations = gt::cells_body(
      columns = Total,
      rows = Total > 2300 & Age_Range != "Total"
    )
  )

# save the gt table
gt::gtsave(data = age_range_gt, filename = "age_range_gt.png", path = figures)

```

![](figures/age_range_gt.png){fig-align="center" fig-alt="A statistical table of the count of falls by 10-year age groups from 0-9 to 100+ along with sparklines showing trends by age group from 2020-2024. The groups 0-9, 40-49, 50-59, 60-69, 80-89, and 90-99 are highlighted in light yellow as they have the highest counts and mostly increasing trends year over year." fig-cap=""}

::: notes
From the table, we can see that the groups that fall the most are within the 50+ age groups Suprisingly, though, we see quite a few fall injuries reported to trauma centers in the youngest age group These older individuals have a group that makes up about 4% of the patients in the registry This 4% will generate about 10% of the state's injury events in a given year, and this is rising This is a group that is reinjured, meaning within a given year they have more than 1 injury event leading to a trauma center case Patients aged 0-9 make up a non-negligible 5% of all fall injuries from 2020-2024
:::

## Patient Sex

<!-- Patient sex group fall counts and gt table -->

```{r count_sex}

#| label: count_sex

# get counts
sex_counts <- trauma_data_clean |>
  dplyr::rename(Patient_Sex = Patient_Gender) |>
  dplyr::mutate(
    Patient_Sex = ifelse(
      is.na(Patient_Sex) |
        grepl(pattern = "not\\s", x = Patient_Sex, ignore.case = TRUE),
      "Missing",
      Patient_Sex
    )
  ) |>
  dplyr::filter(falls) |>
  injury_incident_count(Year, Patient_Sex) |>
  tidyr::complete(Year, Patient_Sex, fill = list(n = 0)) |>
  tidyr::pivot_wider(
    id_cols = Patient_Sex,
    names_from = Year,
    values_from = n,
    values_fill = 0
  ) |>
  janitor::adorn_totals(where = "both")

# capture the ordering from the most recent year (or whichever you want)
sex_order_levels <- sex_counts |>
  dplyr::filter(!Patient_Sex %in% c("Missing", "Total")) |>
  dplyr::arrange(desc(Total)) |>
  dplyr::pull(Patient_Sex) |>
  unique()

# build final table with correct order
sex_counts <- sex_counts |>
  dplyr::mutate(
    Patient_Sex = forcats::fct_relevel(
      Patient_Sex,
      c(sex_order_levels, "Missing", "Total")
    )
  ) |>
  dplyr::arrange(Patient_Sex) |>
  # compute % of Total but exclude the "Total" row from denominator
  dplyr::mutate(
    pct_of_total = ifelse(
      Patient_Sex == "Total",
      1,
      Total / sum(Total[Patient_Sex != "Total"], na.rm = TRUE)
    ),
    .after = Total
  ) |>
  dplyr::rowwise() |>
  dplyr::mutate(
    `2020 - 2024 Trend` = list(c(`2020`, `2021`, `2022`, `2023`, `2024`)),
    dplyr::across(
      `2020`:Total,
      ~ traumar::small_count_label(var = ., cutoff = 6, replacement = NA_real_)
    )
  ) |>
  dplyr::ungroup()

# get gt table
sex_gt <- sex_counts |>
  gt::gt() |>
  gt::fmt_number(columns = `2020`:Total, drop_trailing_zeros = TRUE) |>
  gt::cols_label(
    Patient_Sex ~ "Patient Sex"
  ) |>
  gtExtras::gt_plt_sparkline(
    column = `2020 - 2024 Trend`,
    type = "points",
    same_limit = FALSE,
    label = FALSE
  ) |>
  gt::cols_label(
    pct_of_total ~ "% of Total"
  ) |>
  # bar chart percentage column before sparkline
  gtExtras::gt_plt_bar_pct(
    column = pct_of_total,
    scaled = FALSE,
    labels = TRUE
  ) |>
  # Add footnote to NA cells
  gt::tab_footnote(
    footnote = "Masked to protect confidentiality.",
    locations = gt::cells_body(
      columns = Patient_Sex,
      rows = Patient_Sex == "Intersex"
    )
  ) |>
  gt::opt_footnote_marks(marks = "standard") |>
  gt::sub_missing(columns = `2020`:pct_of_total) |>
  tab_style_hhs(border_cols = `2020`:`2020 - 2024 Trend`)

# save the gt table
gt::gtsave(data = sex_gt, filename = "sex_gt.png", path = figures)

```

![](figures/sex_gt.png){fig-align="center" fig-alt="A statistical table of the count of falls by patient biological sex with sparklines and 100% bar plots for each sex category." fig-cap=""}

::: notes
While males make up the majority of the trauma registry every year, females generate the majority of the falls The trends in these groups are increasing with the overall increasing trend of the aging Iowa population As we live longer, males and females are seeing an increase in injury events, especially falls
:::

## Patient Race - All

<!-- Patient race group counts and gt table -->

```{r counts_race}

#| label: counts_race

# get counts with annual trends
race_counts <- trauma_data_clean |>
  dplyr::mutate(
    Patient_Race = ifelse(
      is.na(Patient_Race) |
        grepl(pattern = "not\\s|select", x = Patient_Race, ignore.case = TRUE),
      "Missing",
      Patient_Race
    ),
    Patient_Race = ifelse(
      grepl(pattern = "american indian", x = Patient_Race, ignore.case = TRUE),
      "AIAN",
      ifelse(
        grepl(pattern = "black", x = Patient_Race, ignore.case = TRUE),
        "Black",
        ifelse(
          grepl(pattern = "native", x = Patient_Race, ignore.case = TRUE),
          "NHOPI",
          Patient_Race
        )
      )
    )
  ) |>
  dplyr::filter(falls) |>
  injury_incident_count(Year, Patient_Race) |>
  tidyr::complete(Year, Patient_Race, fill = list(n = 0)) |>
  tidyr::pivot_wider(
    id_cols = Patient_Race,
    names_from = Year,
    values_from = n,
    values_fill = 0
  ) |>
  janitor::adorn_totals(where = "both")

# programmatically capture order, excluding "Missing"
race_order_levels <- race_counts |>
  dplyr::filter(!Patient_Race %in% c("Missing", "Total")) |>
  dplyr::arrange(desc(Total)) |>
  dplyr::pull(Patient_Race) |>
  unique()

# reshape and relevel
race_counts <- race_counts |>
  # compute % of Total but exclude the "Total" row from denominator
  dplyr::mutate(
    pct_of_total = ifelse(
      Patient_Race == "Total",
      1,
      Total / sum(Total[Patient_Race != "Total"], na.rm = TRUE)
    ),
    .after = Total
  ) |>
  dplyr::rowwise() |>
  dplyr::mutate(
    `2020 - 2024 Trend` = list(c(`2020`, `2021`, `2022`, `2023`, `2024`)),
    dplyr::across(
      `2020`:Total,
      ~ traumar::small_count_label(var = ., cutoff = 6, replacement = NA_real_)
    )
  ) |>
  dplyr::ungroup() |>
  dplyr::mutate(
    Patient_Race = forcats::fct_relevel(
      Patient_Race,
      c(race_order_levels, "Missing", "Total")
    )
  ) |>
  dplyr::arrange(Patient_Race)

# get gt table
race_gt <- race_counts |>
  gt::gt() |>
  gt::fmt_number(columns = `2020`:Total, drop_trailing_zeros = TRUE) |>
  gt::cols_label(
    Patient_Race ~ "Patient Race"
  ) |>
  # bar chart percentage column before sparkline
  gtExtras::gt_plt_bar_pct(
    column = pct_of_total,
    scaled = FALSE,
    labels = TRUE
  ) |>
  gtExtras::gt_plt_sparkline(
    column = `2020 - 2024 Trend`,
    type = "points",
    same_limit = FALSE,
    label = FALSE
  ) |>
  gt::cols_label(
    pct_of_total ~ "% of Total"
  ) |>
  gt::sub_missing(columns = `2020`:Total) |>
  tab_style_hhs(border_cols = `2020`:`2020 - 2024 Trend`) |>
  gt::tab_style(
    style = gt::cell_fill(color = "lightyellow"),
    locations = gt::cells_body(
      columns = Total,
      rows = Total > 300 & !Patient_Race %in% c("Total", "Missing")
    )
  ) |>
  gt::tab_footnote(
    footnote = gt::md(
      "**Hispanic** is typically thought of as patient's ethnicity."
    ),
    locations = gt::cells_body(
      columns = Patient_Race,
      rows = Patient_Race == "Hispanic"
    )
  ) |>
  gt::opt_footnote_marks(marks = "standard")

# save the gt table
gt::gtsave(data = race_gt, filename = "race_gt.png", path = figures)

# get the non-white comparisons
# get counts with annual trends
non_white_race_counts <- trauma_data_clean |>
  dplyr::mutate(
    Patient_Race = ifelse(
      is.na(Patient_Race) |
        grepl(pattern = "not\\s|select", x = Patient_Race, ignore.case = TRUE),
      "Missing",
      Patient_Race
    ),
    Patient_Race = ifelse(
      grepl(pattern = "american indian", x = Patient_Race, ignore.case = TRUE),
      "AIAN",
      ifelse(
        grepl(pattern = "black", x = Patient_Race, ignore.case = TRUE),
        "Black",
        ifelse(
          grepl(pattern = "native", x = Patient_Race, ignore.case = TRUE),
          "NHOPI",
          Patient_Race
        )
      )
    )
  ) |>
  dplyr::filter(falls, Patient_Race != "White") |>
  injury_incident_count(Year, Patient_Race) |>
  tidyr::complete(Year, Patient_Race, fill = list(n = 0)) |>
  tidyr::pivot_wider(
    id_cols = Patient_Race,
    names_from = Year,
    values_from = n,
    values_fill = 0
  ) |>
  janitor::adorn_totals(where = "both")

# programmatically capture order, excluding "Missing"
non_white_race_order_levels <- non_white_race_counts |>
  dplyr::filter(!Patient_Race %in% c("Missing", "Total")) |>
  dplyr::arrange(desc(Total)) |>
  dplyr::pull(Patient_Race) |>
  unique()

# reshape and relevel
non_white_race_counts <- non_white_race_counts |>
  # compute % of Total but exclude the "Total" row from denominator
  dplyr::mutate(
    pct_of_total = ifelse(
      Patient_Race == "Total",
      1,
      Total / sum(Total[Patient_Race != "Total"], na.rm = TRUE)
    ),
    .after = Total
  ) |>
  dplyr::rowwise() |>
  dplyr::mutate(
    `2020 - 2024 Trend` = list(c(`2020`, `2021`, `2022`, `2023`, `2024`)),
    dplyr::across(
      `2020`:Total,
      ~ traumar::small_count_label(var = ., cutoff = 6, replacement = NA_real_)
    )
  ) |>
  dplyr::ungroup() |>
  dplyr::mutate(
    Patient_Race = forcats::fct_relevel(
      Patient_Race,
      c(non_white_race_order_levels, "Missing", "Total")
    )
  ) |>
  dplyr::arrange(Patient_Race)

# get gt table
non_white_race_gt <- non_white_race_counts |>
  gt::gt() |>
  gt::fmt_number(columns = `2020`:Total, drop_trailing_zeros = TRUE) |>
  gt::cols_label(
    Patient_Race ~ "Patient Race"
  ) |>
  # bar chart percentage column before sparkline
  gtExtras::gt_plt_bar_pct(
    column = pct_of_total,
    scaled = FALSE,
    labels = TRUE
  ) |>
  gtExtras::gt_plt_sparkline(
    column = `2020 - 2024 Trend`,
    type = "points",
    same_limit = FALSE,
    label = FALSE
  ) |>
  gt::cols_label(
    pct_of_total ~ "% of Total"
  ) |>
  gt::sub_missing(columns = `2020`:Total) |>
  tab_style_hhs(border_cols = `2020`:`2020 - 2024 Trend`) |>
  gt::tab_style(
    style = gt::cell_fill(color = "lightyellow"),
    locations = gt::cells_body(
      columns = Total,
      rows = Total > 300 & !Patient_Race %in% c("Total", "Missing")
    )
  ) |>
  gt::tab_footnote(
    footnote = gt::md(
      "**Hispanic** is typically thought of as patient's ethnicity."
    ),
    locations = gt::cells_body(
      columns = Patient_Race,
      rows = Patient_Race == "Hispanic"
    )
  ) |>
  gt::opt_footnote_marks(marks = "standard")

# save the gt table
gt::gtsave(
  data = non_white_race_gt,
  filename = "non_white_race_gt.png",
  path = figures
)

```

![](figures/race_gt.png){fig-alt="Statistical tables showing counts of injury events by race group including the white race for each year 2020 through 2024. There is a 100% bar group showing the percent of total injury events by race group, and a sparkline graph in the last column showing the trend of count of injury events from 2020 through 2024." fig-align="center"}

::: notes
The white population in Iowa seems to drive injuries overall, but especially falls. From the data, we can see that white individuals ages 50+ seem to be driving the falls rate, in particular among women.
:::

## Patient Race - Select

![](figures/non_white_race_gt.png){fig-alt="Statistical tables showing counts of injury events by race group excluding the white race for each year 2020 through 2024. There is a 100% bar group showing the percent of total injury events by race group, and a sparkline graph in the last column showing the trend of count of injury events from 2020 through 2024."}

::: notes
However, when we remove Caucasians from the picture, we can see that black and hispanic individuals seem to also be driving the trend in falls among minorities.
:::

## Insurance

<!-- Patient insurance fall counts and gt table -->

```{r counts_insurance}

#| label: counts_insurance

# capture counts and preserve ordering by desc(n)
insurance_counts <- trauma_data_clean |>
  dplyr::mutate(
    Financial_Primary_Method_of_Payment = ifelse(
      is.na(Financial_Primary_Method_of_Payment) |
        grepl(
          pattern = "not\\s(?:known|available)|select",
          x = Financial_Primary_Method_of_Payment,
          ignore.case = TRUE
        ),
      "Missing",
      Financial_Primary_Method_of_Payment
    ),
    Financial_Primary_Method_of_Payment = ifelse(
      grepl(
        pattern = "not billed|institution|worker|liability|managed|unreimbursed",
        x = Financial_Primary_Method_of_Payment,
        ignore.case = TRUE
      ),
      "Other",
      ifelse(
        grepl(
          pattern = "private pay|none",
          x = Financial_Primary_Method_of_Payment,
          ignore.case = TRUE
        ),
        "Self Pay",
        Financial_Primary_Method_of_Payment
      )
    )
  ) |>
  dplyr::filter(falls) |>
  injury_incident_count(Year, Financial_Primary_Method_of_Payment) |>
  tidyr::complete(
    Year,
    Financial_Primary_Method_of_Payment,
    fill = list(n = 0)
  ) |>
  tidyr::pivot_wider(
    id_cols = Financial_Primary_Method_of_Payment,
    names_from = Year,
    values_from = n,
    values_fill = 0
  ) |>
  janitor::adorn_totals(where = "both")

# programmatically derive levels from latest year, excluding "Missing"
insurance_order_levels <- insurance_counts |>
  dplyr::filter(
    !Financial_Primary_Method_of_Payment %in% c("Missing", "Total")
  ) |>
  dplyr::arrange(desc(Total)) |>
  dplyr::pull(Financial_Primary_Method_of_Payment) |>
  unique()

# reshape, add totals, small-count labeling, and relevel
insurance_counts <- insurance_counts |>
  # compute % of Total but exclude the "Total" row from denominator
  dplyr::mutate(
    pct_of_total = ifelse(
      Financial_Primary_Method_of_Payment == "Total",
      1,
      Total /
        sum(Total[Financial_Primary_Method_of_Payment != "Total"], na.rm = TRUE)
    ),
    .after = Total
  ) |>
  dplyr::rowwise() |>
  dplyr::mutate(
    `2020 - 2024 Trend` = list(c(`2020`, `2021`, `2022`, `2023`, `2024`)),
    dplyr::across(
      `2020`:Total,
      ~ traumar::small_count_label(var = ., cutoff = 6, replacement = NA_real_)
    )
  ) |>
  dplyr::ungroup() |>
  dplyr::mutate(
    Financial_Primary_Method_of_Payment = forcats::fct_relevel(
      Financial_Primary_Method_of_Payment,
      c(insurance_order_levels, "Missing", "Total")
    )
  ) |>
  dplyr::arrange(Financial_Primary_Method_of_Payment)

# build gt
insurance_gt <- insurance_counts |>
  gt::gt() |>
  gt::fmt_number(columns = `2020`:Total, drop_trailing_zeros = TRUE) |>
  gt::cols_label(
    Financial_Primary_Method_of_Payment ~ "Patient Payment Method"
  ) |>
  # bar chart percentage column before sparkline
  gtExtras::gt_plt_bar_pct(
    column = pct_of_total,
    scaled = FALSE,
    labels = TRUE
  ) |>
  gtExtras::gt_plt_sparkline(
    column = `2020 - 2024 Trend`,
    type = "points",
    same_limit = FALSE,
    label = FALSE
  ) |>
  gt::cols_label(
    pct_of_total ~ "% of Total"
  ) |>
  gt::sub_missing(columns = `2020`:Total) |>
  tab_style_hhs(border_cols = `2020`:`2020 - 2024 Trend`) |>
  gt::tab_style(
    style = gt::cell_fill(color = "lightyellow"),
    locations = gt::cells_body(
      columns = Total,
      rows = Total > 1000 &
        !Financial_Primary_Method_of_Payment %in% c("Total", "Missing")
    )
  ) |>
  gt::tab_footnote(
    footnote = "Masked to protect confidentiality.",
    locations = gt::cells_body(
      column = Financial_Primary_Method_of_Payment,
      rows = Financial_Primary_Method_of_Payment %in%
        c("Worker's compensation", "Unreimbursed")
    )
  ) |>
  gt::opt_footnote_marks(marks = "standard")

# save
gt::gtsave(data = insurance_gt, filename = "insurance_gt.png", path = figures)

```

![](figures/insurance_gt.png){fig-alt="A statistical table showing the counts per year from 2020-2024 of the number of injury events by patients' primary payment method. There is a sparkline graph and 100% bar plots in the last columns showing the trend from 2020-2024. Small counts are masked to protect patient confidentiality." fig-align="center"}

::: notes
Clearly, Medicare, private insurance, and Medicaid populations are most represented among fall patients.

This seems to follow age group trend where older individuals have a higher probability of falling and the insurance coverage reflects that trend.
:::

# Where do we fall?

<!-- Generate the leaflet map -->

```{r run_map, include=TRUE}

#| label: run_map

trauma_map
```

::: notes
We saw in other visualizations how the overall injury rate is climbing, and the rate of falls is following that overall statewide trend.

When we see this on a map, it is striking how we see the injury and fall rates grow.

In particular, falls seem to affect the central-to-south west, center and center south, east and southeastern districts of the state, although there are many counties outside these regions with severe fall rates.
:::

# Patient outcomes

Now, we will learn more about the morbidity and mortality related to falls in Iowa.

## Body regions affected

Falls disproportionately result in TBI. <!-- Body region affected by falls count and gt table -->

```{r counts_body_region}

#| label: counts_body_region

# capture counts and preserve ordering by desc(n)
body_region_counts <- trauma_data_clean |>
  dplyr::mutate(
    BODY_REGION_CATEGORY_LEVEL_2_1 = ifelse(
      is.na(BODY_REGION_CATEGORY_LEVEL_2_1),
      "Missing",
      BODY_REGION_CATEGORY_LEVEL_2_1
    )
  ) |>
  dplyr::filter(falls) |>
  injury_incident_count(Year, BODY_REGION_CATEGORY_LEVEL_2_1) |>
  tidyr::complete(
    Year,
    BODY_REGION_CATEGORY_LEVEL_2_1,
    fill = list(n = 0)
  ) |>
  dplyr::mutate(
    BODY_REGION_CATEGORY_LEVEL_2_1 = ifelse(
      n < 100,
      "Other",
      BODY_REGION_CATEGORY_LEVEL_2_1
    )
  ) |>
  dplyr::summarize(n = sum(n), .by = c(Year, BODY_REGION_CATEGORY_LEVEL_2_1)) |>
  tidyr::pivot_wider(
    id_cols = BODY_REGION_CATEGORY_LEVEL_2_1,
    names_from = Year,
    values_from = n,
    values_fill = 0
  ) |>
  janitor::adorn_totals(where = "both")

# programmatically derive levels from latest year, excluding "Missing"
body_region_order_levels <- body_region_counts |>
  dplyr::filter(
    !BODY_REGION_CATEGORY_LEVEL_2_1 %in% c("Missing", "Total")
  ) |>
  dplyr::arrange(desc(Total)) |>
  dplyr::pull(BODY_REGION_CATEGORY_LEVEL_2_1) |>
  unique()

# reshape, add totals, small-count labeling, and relevel
body_region_counts <- body_region_counts |>
  # compute % of Total but exclude the "Total" row from denominator
  dplyr::mutate(
    pct_of_total = ifelse(
      BODY_REGION_CATEGORY_LEVEL_2_1 == "Total",
      1,
      Total /
        sum(Total[BODY_REGION_CATEGORY_LEVEL_2_1 != "Total"], na.rm = TRUE)
    ),
    .after = Total
  ) |>
  dplyr::rowwise() |>
  dplyr::mutate(
    `2020 - 2024 Trend` = list(c(`2020`, `2021`, `2022`, `2023`, `2024`)),
    dplyr::across(
      `2020`:Total,
      ~ traumar::small_count_label(var = ., cutoff = 6, replacement = NA_real_)
    )
  ) |>
  dplyr::ungroup() |>
  dplyr::mutate(
    BODY_REGION_CATEGORY_LEVEL_2_1 = forcats::fct_relevel(
      BODY_REGION_CATEGORY_LEVEL_2_1,
      c(body_region_order_levels, "Missing", "Total")
    )
  ) |>
  dplyr::arrange(BODY_REGION_CATEGORY_LEVEL_2_1)

# build gt
body_region_gt <- body_region_counts |>
  gt::gt() |>
  gt::fmt_number(columns = `2020`:Total, drop_trailing_zeros = TRUE) |>
  gt::cols_label(
    BODY_REGION_CATEGORY_LEVEL_2_1 ~ "Body Region"
  ) |>
  # bar chart percentage column before sparkline
  gtExtras::gt_plt_bar_pct(
    column = pct_of_total,
    scaled = FALSE,
    labels = TRUE
  ) |>
  gtExtras::gt_plt_sparkline(
    column = `2020 - 2024 Trend`,
    type = "points",
    same_limit = FALSE,
    label = FALSE
  ) |>
  gt::cols_label(
    pct_of_total ~ "% of Total"
  ) |>
  gt::sub_missing(columns = `2020`:Total) |>
  tab_style_hhs(border_cols = `2020`:`2020 - 2024 Trend`) |>
  gt::tab_style(
    style = gt::cell_fill(color = "lightyellow"),
    locations = gt::cells_body(
      columns = Total,
      rows = Total > 1000 &
        !BODY_REGION_CATEGORY_LEVEL_2_1 %in% c("Total", "Missing")
    )
  )

# save
gt::gtsave(
  data = body_region_gt,
  filename = "body_region_gt.png",
  path = figures
)

```

![](figures/body_region_gt.png){fig-alt="A statistical table showing the body regions that are involved in fall injuries from 2020-2024, with a 100% bar chart showing proportion of total injury events and sparklines showing the trend from 2020-2024." fig-align="center"}

::: notes
We see that falls tend to result in TBI in 1/5 injury events, whereas hip injuries such as fractures including some isolated hip fractures are just under 1/5, with injuries to extremities and other head injuries bringing up the rear. These are all body regions we would logically expect to be injured most.
:::

## Trauma Team Activations

We just saw how often severe injuries happen to fall patients how often do we activate the trauma team with falls compared to non falls?

## Trauma Team Activations

<!-- Calculate proportion of TTAs among groups -->

```{r counts_tta}

#| label: counts_tta

# get overall TTA rate for all injuries
overall_tta_rate <- trauma_data_clean |>
  injury_case_count(Trauma_Team_Activated) |>
  dplyr::mutate(percent = n / sum(n)) |>
  dplyr::filter(Trauma_Team_Activated == "Trauma Team Activated") |>
  dplyr::pull(percent)

# get counts of tta over the years for falls
# versus other injury types
# capture counts and preserve ordering by desc(n)
tta_counts <- trauma_data_clean |>
  injury_case_count(Year, falls, Trauma_Team_Activated) |>
  tidyr::pivot_wider(
    id_cols = c(falls, Trauma_Team_Activated),
    names_from = Year,
    values_from = n
  ) |>
  janitor::adorn_totals(where = "col") |>
  dplyr::mutate(falls = ifelse(falls, "Fall", "Other Injury")) |>
  dplyr::rename(Injury = falls) |>
  janitor::adorn_totals(where = "row") |>
  dplyr::mutate(
    Percent = dplyr::if_else(
      Injury != "Total",
      Total / sum(Total),
      overall_tta_rate
    ),
    .by = Injury
  )

# reshape, add totals, small-count labeling, and relevel
tta_counts <- tta_counts |>
  dplyr::rowwise() |>
  dplyr::mutate(
    `2020 - 2024 Trend` = list(c(`2020`, `2021`, `2022`, `2023`, `2024`)),
    dplyr::across(
      `2020`:Total,
      ~ traumar::small_count_label(var = ., cutoff = 6, replacement = NA_real_)
    )
  ) |>
  dplyr::ungroup() |>
  dplyr::mutate(
    Trauma_Team_Activated = ifelse(
      Trauma_Team_Activated == "Trauma Team Activated",
      "TTA",
      ifelse(
        Trauma_Team_Activated == "Trauma Team Not Activated",
        "No TTA",
        NA_character_
      )
    )
  )

# build gt
tta_gt <- tta_counts |>
  gt::gt() |>
  gt::fmt_number(columns = `2020`:Total, drop_trailing_zeros = TRUE) |>
  gt::cols_label(
    Trauma_Team_Activated ~ "",
    Percent ~ "% TTA"
  ) |>
  gt::sub_missing(columns = Trauma_Team_Activated:Total) |>
  gt::tab_row_group(label = "Other Injury", rows = 1:2) |>
  gt::tab_row_group(label = "Falls", rows = 3:4) |>
  gt::tab_row_group(label = "Total", rows = 5) |>
  gt::row_group_order(groups = c("Falls", "Other Injury", "Total")) |>
  gt::cols_hide(columns = Injury) |>
  # bar chart percentage column before sparkline
  gtExtras::gt_plt_bar(
    column = Percent,
    scale_type = "percent"
  ) |>
  gtExtras::gt_plt_sparkline(
    column = `2020 - 2024 Trend`,
    type = "points",
    same_limit = FALSE,
    label = FALSE
  ) |>
  tab_style_hhs(border_cols = `2020`:`2020 - 2024 Trend`) |>
  gt::tab_style(
    style = gt::cell_fill(color = "lightyellow"),
    locations = gt::cells_body(
      columns = Total,
      rows = grepl(
        pattern = "tta$",
        x = Trauma_Team_Activated,
        ignore.case = TRUE
      )
    )
  ) |>
  gt::tab_footnote(
    footnote = gt::md(
      "Counts in this table reflect **total cases at hospitals**, not injury events."
    ),
    locations = gt::cells_column_labels(columns = Total)
  ) |>
  gt::tab_footnote(
    footnote = gt::md(
      "% TTA in the **Total** row is the overall TTA rate for all years and injury types."
    ),
    locations = gt::cells_column_labels(columns = Percent)
  ) |>
  gt::opt_footnote_marks(marks = "standard")

# save
gt::gtsave(
  data = tta_gt,
  filename = "tta_gt.png",
  path = figures
)

```

![](figures/tta_gt.png){fig-alt="A statistical table showing the count of trauma team activations over the years, with overal rates for all years displayed by a bar graph, and trends of counts over the years 2020-2024 displayed by a sparkline graph." fig-align="center"}

::: notes
Getting into a bit more serious topic, which may seem on its face critical of those that care for injured patients, we will discuss how well we triage our falls patients.

Presently, TTAs are NOT called disproportionately for falls patients.

Looking at this information, we might still conclude - that is likely because of lower injury severity.

Overall, this is true, falls make up most of our injury events in Iowa (\~ 60%), and most are low acuity. But let's look for good measure.
:::

## Falls Injury Severity

<!-- Get counts of ISS ranges for falls -->

```{r counts_falls_iss}

#| label: counts_falls_iss

falls_iss_counts <- trauma_data_clean |>
  dplyr::filter(!is.na(ISS_Calculated)) |>
  injury_case_count(falls, Trauma_Team_Activated, ISS_Range) |>
  dplyr::mutate(
    falls = ifelse(falls, "Fall", "Other Injury"),
    ISS_Range = factor(
      ISS_Range,
      levels = c("1 - 8", "9 - 15", "16+"),
      labels = c("1-8", "9-15", "16+"),
      ordered = TRUE
    )
  ) |>
  tidyr::pivot_wider(
    id_cols = c(falls, ISS_Range),
    names_from = Trauma_Team_Activated,
    values_from = n
  ) |>
  dplyr::arrange(falls, ISS_Range) |>
  janitor::adorn_totals(where = "both") |>
  dplyr::mutate(
    percent_activated = (`Trauma Team Activated` / Total) * 100
  )

# generate the gt table
falls_iss_gt <- falls_iss_counts |>
  gt::gt() |>
  gt::fmt_number(columns = 3:5, drop_trailing_zeros = TRUE) |>
  gt::fmt_percent(percent_activated, scale_values = FALSE) |>
  gt::tab_row_group(label = "Falls", rows = 1:3) |>
  gt::tab_row_group(label = "Other Injury", rows = 4:6) |>
  gt::tab_row_group(label = "Total", rows = 7) |>
  gt::row_group_order(groups = c("Falls", "Other Injury", "Total")) |>
  gt::cols_hide(columns = falls) |>
  gt::cols_label(
    ISS_Range ~ "",
    `Trauma Team Activated` ~ "TTA",
    `Trauma Team Not Activated` ~ "No TTA",
    percent_activated ~ "% TTA"
  ) |>
  gtExtras::gt_duplicate_column(
    percent_activated,
    dupe_name = "Comparison",
    after = percent_activated
  ) |>
  gtExtras::gt_plt_percentile(
    column = "Comparison"
  ) |>
  tab_style_hhs(border_cols = 3:7) |>
  gt::tab_style(
    style = gt::cell_fill(color = "lightyellow"),
    locations = gt::cells_body(
      columns = percent_activated,
      rows = grepl(
        pattern = "16|15",
        x = ISS_Range,
        ignore.case = TRUE
      )
    )
  ) |>
  gt::tab_footnote(
    footnote = gt::md(
      "Counts in this table reflect **total cases at hospitals** with non-missing ISS, not injury events."
    ),
    locations = gt::cells_column_labels(columns = Total)
  ) |>
  gt::tab_footnote(
    footnote = gt::md(
      "% TTA in the **Total** row is the overall TTA rate for all years and injury types."
    ),
    locations = gt::cells_column_labels(columns = percent_activated)
  ) |>
  gt::opt_footnote_marks(marks = "standard")

# save the gt object
gt::gtsave(
  data = falls_iss_gt,
  filename = "falls_iss_gt.png",
  path = figures
)

```

![](figures/falls_iss_gt.png){fig-alt="A statistical table showing counts of trauma center cases by whether or not the patient had a fall or another injury as the primary external cause and their injury severity score range. Counts are pivoted by whether or not the trauma team was activated, and proportions of trauma team activations are shown by numbers and a dot plot in the Comparison column." fig-align="center"}

::: notes
On this visual, please note on the dot plot that the line in the middle of each plot indicates the 50% mark, and each horizontal visual goes from left to right on a scale from 0% to 100%.

Falls -\> low TTA rate with high injury severity.

What we find within this view is that even when injury severity is quite acute at an injury severity score \>= 16, we still see only 36% of cases being activated.

This is opposed to all other injuries where the trauma team is activated 77% of the time.
:::

## Survival rate overall

<!-- Calculate overall mortality rates -->

```{r mortality_rate_overall}

#| label: mortality_rate_overall

# utilize traumar to get mortality rates
mortality_rates <- trauma_data_clean |>
  dplyr::filter(!is.na(Risk_Definition)) |>
  traumar::seqic_indicator_8(
    level = Level,
    unique_incident_id = Unique_Incident_ID,
    mortality_indicator = Death,
    risk_group = Risk_Definition,
    groups = c("Year", "falls"),
    calculate_ci = NULL
  ) |>
  purrr::pluck(2)

# pivot mortality rates
mortality_rates_pivot <- mortality_rates |>
  dplyr::mutate(
    Risk_Definition = factor(
      Risk_Definition,
      levels = c("Low", "Moderate", "High"),
      ordered = TRUE
    )
  ) |>
  dplyr::arrange(Year, Risk_Definition) |>
  dplyr::select(-tidyselect::matches("numerator|denominator")) |>
  tidyr::pivot_wider(
    id_cols = c(Risk_Definition, falls),
    names_from = Year,
    values_from = seqic_8_risk
  ) |>
  dplyr::rename(Injury = falls) |>
  dplyr::mutate(Injury = ifelse(Injury, "Fall", "Other Injury"))

# generate the gt table
mortality_rates_gt <- mortality_rates_pivot |>
  gt::gt() |>
  gt::tab_row_group(label = "Low", rows = 1:2) |>
  gt::tab_row_group(label = "Moderate", rows = 3:4) |>
  gt::tab_row_group(label = "High", rows = 5:6) |>
  gt::row_group_order(groups = c("Low", "Moderate", "High")) |>
  gt::tab_source_note(
    source_note = gt::md(paste0(
      fontawesome::fa("sticky-note"),
      " All proportions in the table indicate survival rates."
    ))
  ) |>
  gt::fmt_percent(columns = "2020":"2024") |>
  gt::cols_hide(columns = Risk_Definition) |>
  gt::cols_label(
    Injury ~ ""
  ) |>
  tab_style_hhs(border_cols = 3:tidyselect::last_col())

# save the gt object
gt::gtsave(
  data = mortality_rates_gt,
  filename = "mortality_rates_gt.png",
  path = figures
)

```

![](figures/mortality_rates_gt.png){fig-alt="A statistical table showing a comparison of survival rates among fall injury cases and other injury cases in Iowa 2020-2024." fig-align="center"}

## Risk adjusted mortality

Falls at times have poorer outcomes than other injuries. <!-- Calculate RMM overall and plot -->

```{r rmm_overall}

#| label: rmm_overall

rmm_overall <- trauma_data_clean |>
  dplyr::filter(!is.na(Probability_of_Survival_Calc), !is.na(Death)) |>
  dplyr::distinct(Unique_Incident_ID, .keep_all = TRUE) |>
  dplyr::mutate(Survival = ifelse(Death, FALSE, TRUE)) |>
  traumar::rmm(
    Ps_col = Probability_of_Survival_Calc,
    outcome_col = Survival,
    group_vars = c("Year", "falls"),
    bootstrap_ci = FALSE,
    Divisor1 = 3.5,
    Divisor2 = 3.5,
    seed = 10232015
  )

# plot the RMM data over time
rmm_plot <- rmm_overall |>
  dplyr::mutate(falls = ifelse(falls, "Fall", "Other Injury")) |>
  dplyr::rename(Injury = falls) |>
  ggplot2::ggplot(ggplot2::aes(
    x = Year,
    y = population_RMM,
    fill = Injury
  )) +
  ggplot2::geom_col(
    width = 0.5,
    position = ggplot2::position_dodge(width = 0.75)
  ) +
  ggplot2::geom_errorbar(
    ggplot2::aes(ymin = population_RMM_LL, ymax = population_RMM_UL),
    position = ggplot2::position_dodge(width = 0.75),
    width = 0.25
  ) +
  ggthemes::scale_fill_tableau() +
  ggplot2::labs(
    x = "",
    y = "Relative Mortality Metric",
    caption = "*Errorbars indicate 95% CI, given missing probability of\nsurvival measurements and missing records."
  ) +
  traumar::theme_cleaner(base_size = 20)

# save the ggplot object
ggplot2::ggsave(filename = "rmm_plot.png", plot = rmm_plot, path = figures)

```

![](figures/rmm_plot.png){fig-alt="A column chart by year from 2020 through 2024 of the calculated relative mortality metric, with columns colored by whether or not a given case was a fall. 95% confidence intervals are visualized as errorbars with whiskers indicating the estimated error." fig-align="center"}

::: notes
This visualization breaks the typical assumption that falls are overall less severe and less concerning injuries. While overall RMM continues to be positive in the Iowa trauma system, we are seeing unfortunate underperformance with fall patients compared to other injuries in 2022 and 2024.

These data cause us to ask questions like what is driving up the rate of mortality among fall patients? Would more aggressive TTA policies help to achieve better outcomes with falls patients? What other factors could contribute.

Some of the poor outcomes could be out of hospitals controls, such as the long periods of time TBI patients may lay injured alone before they are able to get to specialty care. TBIs are the largest body region affected by falls.
:::

## Risk adjusted mortality, digging deeper

A deeper dive. <!-- Calculated RMM for bins only -->

```{r rm_bin_summary}

#| label: rm_bin_summary

# get the detailed bin-level summary of overall relative mortality
rmm_summary <- trauma_data_clean |>
  dplyr::filter(!is.na(Probability_of_Survival_Calc), !is.na(Death)) |>
  dplyr::mutate(Survival = ifelse(Death, FALSE, TRUE)) |>
  dplyr::distinct(Unique_Incident_ID, .keep_all = TRUE) |>
  traumar::rm_bin_summary(
    Ps_col = Probability_of_Survival_Calc,
    outcome_col = Survival,
    group_vars = NULL,
    bootstrap_ci = FALSE,
    Divisor1 = 3.5,
    Divisor2 = 3.5,
    seed = 10232015
  )

# remove some columns to help interpretation
rmm_summary_final <- rmm_summary |>
  dplyr::select(-tidyselect::matches("_(U|L)L$|_CI$|R_b$|midpoint")) |>
  dplyr::rename(
    Bin = bin_number,
    Alive = TA_b,
    Deceased = TD_b,
    N = N_b,
    `Obs. Deaths` = EM_b,
    `Pred. Surv` = AntiS_b,
    `Pred. Death` = AntiM_b,
    `Bin Start` = bin_start,
    `Bin End` = bin_end,
    RMM = population_RMM
  ) |>
  dplyr::relocate(`Bin Start`, .after = Bin) |>
  dplyr::relocate(`Bin End`, .after = `Bin Start`)

# generate the gt table
rmm_summary_gt <- rmm_summary_final |>
  gt::gt() |>
  gt::fmt_percent(
    columns = c("Bin Start", "Bin End", "Obs. Deaths":"Pred. Death")
  ) |>
  gt::fmt_number(columns = Alive:N, drop_trailing_zeros = TRUE) |>
  gtExtras::gt_plt_bar(column = RMM, scale_type = "number", accuracy = 0.001) |>
  tab_style_hhs(border_cols = 2:tidyselect::last_col())

# save the gt object
gt::gtsave(
  data = rmm_summary_gt,
  filename = "rmm_summary_gt.png",
  path = figures
)

```

![](figures/rmm_summary_gt.png){fig-alt="A statistical table using data from 2020 through 2024 showing the calculated relative mortality metric by probability of survival groups. The start and endpoints for each bin are shown for 8 groups, along with the total alive, total dead, total patients, and the predicted survivors and predicted deaths for each bin. The last column is a horizontal bar graph visualizing the relative mortality metric estimation." fig-align="center"}

::: notes
In this visual, we see mostly what we would expect, which is that mortality rates increase as the probability of survival decreases.

However, we might like to know why, among patients with \> 88% probabilyt of survival, which the RMM is so low at \~ 0.4 compared to adjacent groups \>= 96%?

When we examine our data carefully, we can begin to see outcomes that help us inform meaningful performance improvement processes that can in turn save lives.
:::

```{r lives_saved_estimation}

#| label: lives_saved_estimation

# estimate # of fall patients lives saved over what was expected 2020-2024

saved_lives <- trauma_data_clean |>
  dplyr::filter(!is.na(Probability_of_Survival_Calc), !is.na(Death), falls) |>
  dplyr::distinct(Unique_Incident_ID, .keep_all = TRUE) |>
  dplyr::group_split(Year) |>
  purrr::map(\(.x) {
    year_val <- unique(.x$Year)
    result <- traumar::trauma_performance(
      df = .x,
      Ps_col = Probability_of_Survival_Calc,
      outcome_col = Death,
      z_method = "survival"
    )
    dplyr::mutate(result, Year = year_val, .before = 1)
  }) |>
  purrr::list_rbind()

# get predicted falls deaths
predicted_deaths <- saved_lives |>
  dplyr::summarize(total = round(sum(Predicted_Deaths))) |>
  dplyr::pull(total)

# get observed deaths
observed_deaths <- saved_lives |>
  dplyr::summarize(total = sum(N_Deaths)) |>
  dplyr::pull(total)

# get overall saved lives
overall_saved_lives <- saved_lives |>
  dplyr::summarize(total = round(sum(Patient_Estimate))) |>
  dplyr::pull(total)

```

# A job well done

-   From 2020-2024, we expected `{r} prettyNum(predicted_deaths, big.mark = ",")` deaths.
-   We observed `{r} prettyNum(observed_deaths, big.mark = ",")` deaths
-   Overall, Iowa trauma centers saved `{r} prettyNum(overall_saved_lives, big.mark = ",")` fall patients that were predicted to die from 2020-2024.

# Takeaways

::: incremental
-   Falls as a mechanism of injury are increasing rapidly in Iowa
    -   Among age groups 50+, females, white/black individuals
-   Falls affect specific areas of the state most in 2024
    -   Namely, the southwest, central/south, east, and southeast areas.
:::

# Takeaways (continued)

::: incremental
-   Falls are not triaged as aggressively in trauma centers, and warrant more attention
-   Apprx. 4% of the Iowa trauma patient population accounts for \~ 10% of all injury events
    -   This is a group that gets injured frequently (**reinjury**), and is a prime target for prevention efforts.
:::

# Analyses

At BEMTS, we have been hard at work creating open source software that benefits Iowans and other jurisdictions.

[GitHub Page](https://github.com/bemts-hhs/) [`{traumar}` package page](https://bemts-hhs.github.io/traumar/)

# Questions?

# Thanks!

Nicolas Foss, Ed.D., MS

Epidemiologist

Bureau of Emergency Medical and Trauma Services

Bureau of Health Statistics

Division of Public Health \> Iowa HHS

C: 515.985.9627 \|\| E: nicolas.foss at hhs.iowa.gov